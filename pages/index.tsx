import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useState, useEffect } from 'react'
import "material-icons/iconfont/material-icons.css"
import Link from 'next/link'
import { Swiper, SwiperSlide } from 'swiper/react'
import "swiper/css"
import "material-icons/iconfont/material-icons.css"
import { toast } from 'react-toastify'


import FoodPreview from '@/components/ItemPreview'

import { getItems, getCategories, getPersons, supabase, checkInit, initSupabase } from '@/functions/Supabase'
import { getSettings } from '@/functions/Settings'

// interfaces
import ICategory from '@/interfaces/ICategory'
import IPerson from '@/interfaces/IPerson'
import IItem from '@/interfaces/IItem'
import ISettings from '@/interfaces/ISettings'

export default function Home() {
  // data
  const [items, setItems] = useState<IItem[]>([]);
  const [categories, setCategories] = useState<ICategory[]>([]);
  const [persons, setPersons] = useState<IPerson[]>([]);
  const [online, setOnline] = useState<boolean>(false);

  const refreshData = async () => {
    try {
      const items = await getItems();
      const categories = await getCategories();
      const persons = await getPersons();

      setItems(items);
      setCategories(categories);
      setPersons(persons);
      setOnline(true);
    } catch(e) {
      console.log(e);
      setOnline(false);
    }
  }

  useEffect(() => {

    (async () => {
    
      const result = await initSupabase();
      if(!result) {
        toast("Could not connect to database", {type: "error"});
        return;
      }
      await refreshData();

      // Realtime updates
      if(checkInit()) {
        const changes = supabase.channel('custom-all-channel')
        .on(
          'postgres_changes',
          { event: '*', schema: 'public', table: 'items' },
          (payload : any) => {
            console.log('Change received!', payload)
            const index = items.findIndex((item) => item.id === payload.new.id);
            if(index > -1) {
              items[index] = payload.new;
              setItems([...items]);
            }
          }
        )
        changes.subscribe();
      } else {
        setOnline(false);
      }
    })();

  }, [])

  return (
    <>
      <Head>
        <title>Item Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        <header className={styles.header}>
          <h1>ItemTracker</h1>
          <div className={styles.headerRight}>
            <div className={styles.status}>
              <div className={`${styles.statusIcon} ${!online && styles.offline}`}></div>
              <span>{online ? "Online" : "Offline"}</span>
            </div>
            <Link href="/Settings"><span className='material-icons'>settings</span></Link>
          </div>
        </header>

        {categories.map((category) => (
          <div className={styles.categoryReel} key={category.id}>
            <h2>{category.name}</h2>
            <div className={styles.categoryReelContent}>
        
              <Swiper 
                slidesPerView={3}
                spaceBetween={25}
                
                className={styles.categoryReelItems}>
                {items.filter((item) => (item.category === category.id) && !item.deleted).map((item) => (
                    <SwiperSlide className={styles.item} key={item.id}>
                      <FoodPreview food={item} size="medium" />
                    </SwiperSlide>
                  ))}
              </Swiper>

              <Link className={styles.categoryReelShowAll} href={{ pathname: `/Category`, query: { id: category.id }}}>
                <span>View all</span>
                <span className='material-icons'>arrow_right_alt</span>
              </Link>

              </div>
          </div>
        ))}
        
        <Link href="/Add">
          <button 
            onClick={() => { }}
            style={{ 
              color: "red", 
              background: "lightgreen",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              padding: ".5rem",
              outline: "none",
              border: "none",
              borderRadius: ".66rem",
              cursor: "pointer",
              position: "absolute",
              bottom: "5rem",
              right: "5rem"
              }}>
              <span 
                style={{ color: "black", fontWeight: "900", fontSize: "32pt" }} 
                className='material-icons'>add
              </span>
          </button>
        </Link>
      </main>
    </>
  )
}
